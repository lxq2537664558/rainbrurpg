* v 0.0.4-142
- Updating PLSM2
- Updating Ogre CVS (current version is 1.2.4, now 1.2.5)     OK
- Change tServerListItem->ipAdress (ipAddress)
- ftpclient uses ServerList to choose the ftpserver
- Update xident addserver dialog
- Update xident foxserverlist
- server's MainWindow::registerServer uses uniquename and type
- common/curlserveradd uses uniquename and servertype
- ConfigDialog init servertype value from ServerConfiguration
- ConfigDialog stores servertype in ServerConfiguration
- xmlServerConf save and restore servertype
- ServerConfiguration uses uniquename and servertype
- doxygen documentation
- ConfigDialog shows uniquename and uses servertype
- adminsite doxygen documentation
- Add UniqueName and Type to the adminsite

* v 0.0.4-141
- UniqueName class implementation
- Client tells the transfer is finished
   common/ftpclient.cpp:563
- Server closes the transfer
- Test the RETR transfer with a SHA hash sum program        OK
- Test the STOR transfer with a SHA hash sum program        OK
- The RETR does not finish (it stop at 99.63%)
   It is OK in BINARY mode
- Still a pb with filename of STOR command    FIXED
- The client know the transfer is terminated
- The server closes the data channel when the file is eof
   Does the client a segfault ?
- Makes the progressbar progress (client)
   FtpClient::RETR_ThreadedFunction

* v 0.0.4-140
- Makes the progressbar progress (server)
- FtpServer::commandRETR read file and send packets
   FtpDataConnection::commandRETR
   Must be threaded or based on a signal (QIODevice::bytesWritten OK)
- A FtpServer warning
  [ftptransfer.cpp:649] WW FtpDataConnection not found
   nextFilename is not correctly set
- FtpTransfer::commandRETR : The filename is not correct 
   [ftptransfer.cpp:423] -- Opening file '/home/mouse/servertest' in 
   /home/mouse/servertest
- Doxygen documentation improvement
- common/ftpclient : RETR bug fixed when file does not exit
- Draw the RETR file size (client)
- Draw the RETR file size (server)
- replace server's "200 waiting FSIZE command" by a message that give the
   file size. (ftpcontrol.cpp:20)
- in common/ftpclient : std::string commandRETR
     (const std::string& filename)
- common/ftpclient : STOR_ThreadedFunction implementation

* v 0.0.4-139
- Showing in ftpclient that the transfer is ended
- common/ftpClient::transferTerminated signal
- Server is PASSIVE by default
  The server definition is in ftptransfer.cpp
- PASV is deactivated
- Replace StringConv::ctoi by stoi
- adminsite/Makefile added
- Add rpgConcepts to the backup_prog script
- An Implementation section in rpgConcepts
- A french latex article called rpgConcepts in prog/latex
- Adminsite now in prog/adminsite (CVS checkout)

* v 0.0.4-138
- Ftp port correctly added to the administration site
- Save and restore correctly ServerConfiguration (xmlServerConf)
- Modify ServerConfiguration
- Add a tabcontrol in Server configuration dialog (ConfigDialog)
- Some Server configuration dialog tabs (Identification/Network/Tech note)
- and dialog (addServer and edit)
- Modify xIdent table (foxserverlist)
- Modify xmlServerList
- Add progr/php to the ./backup_prog script
- Adding php code source of admin site in sourceforge in the adminsite branch
- Modify user manual for FTP port
- Modify UnitTest for CurlServerAdd
- Add a 'ftp' key to CurlServerAdd
- TestSuite may contains some TestCase

* v 0.0.4-137
- Admin site doxygen documentation
- FTP client close the connection when transfer is finish
- Compare FtpDataConnection if state is IN_PROGRESS
- Admin site now contains FTP port
- Using Sha1 for admin site identification method
- Open the server window in Maximize state
- TransferVisual filesize is NULL                FIXED
- Fix the TransferVisual percent infinite division bug
- A TransferVisual::drawArrow() function
- Correctly draw TransferVisual in all states
- Server draw the transfer as terminated
- TransferVisual has a drawInProgress(QPainter * painter, ...)
- Implement a TransferVisual::state
   TVS_PROGRESS, TVS_ERROR, TVS_FINISH
- TransferVisual has a drawError(QPainter * painter,
   const QColorGroup & cg, int column, int width, int align) function
- FtpClient update file information when transfer is created
   Filename, In/out, filesize
- The FtpClient close the data channel when transfer is finished
- UnitTests doxygen documentation
- CurlServerDelete  Unittest implementation 
- A pb with filesize : Server OK
- An error seems to block transfer

* v 0.0.4-136
- Doxygen documentation
- Updating the Progressbar of the transfer
- a common/ftpclient::getFilesize(filename)
- Showing transfer in tool-ftpclient (in a FXMattrix)
- tool-ftpclient gui is blocked during transfer (FIXED using a thread)
- ftpclient STOR code in the threaded function 
- Trying to access class member in ftpclient threaded function       OK
- common/ftpclient::STOR creates a thread
- ./configure tests boost::thread
- Trying to update tool-ftpclient in
   FtpClientWindow::slotBytesWritten()      Doesn't work
- Connect - common/ftpclient::bytesRead(int) signal to a slot
   in  tool-ftpclient
- common/ftpclient bytesRead(int) bytesWritten(int) signals
- TransferVisual draw \filename FIXED
- Fix the filename bug. The filename received by the server is troncated
   \r\n was missing
- Test CurlServerAdd::perform with curlserverdelete and virtualserver.h
- CurlServerAdd UnitTest Tests initial values (should =="")

* v 0.0.4-135
- transferVisual computes rate and remaining time only every one
     seconds
- Compute the remaining time
- transferVisual progress bar always update
- Compute the download rate
- FtpDataConnection must be different from IP/port key
- The newly created TransferVisual is registered in a
   FtpDataConnection
- FtpTransfer::registerVisual must have the clent control port
- TransferVisual 1st column is IP/port
- Creates the FtpDataConnection object in registerVisual()
- FtpTransfer::newConnection creates a FtpDataConnection
- A basic boostrap script that copy htmlMakefile
- FtpDataConnection implementation
- Can the server listen more than one port NO
- Update the TransferVisual item for each packet wrote or received
- CurlServerAdd set/get unit test OK     
- curlposteddata UnitTest
- Delete the test TransferVisual

* v 0.0.4-134
- Doxygen documentation
- Must get the filesize after a STOR command
- TransferVisual draw filesize
- Create a treeviewItem for each transfer 
- The ProgressBar represents (downloaded*100)/filesize
- A problem with TransferVisual images background when selected
   Fixed with a transparent background color
- TransferVisual uses the selected ColorGroup
- TransferVisual uses images for transfer direction
- server/images/transferIn.png and transferOut.png added to
   resources.qrc
- Two images in server/images/transferIn.png and transferOut.png
   height=20
- The download list widget is a Q3ListViewItem
- Try to add a ProgressBar in the downloads list
- The download widget test can be implemented in TransferVisual
- Trying to make a download widget in prog/cpp/qlist (DownloadList)  OK

* v 0.0.4-133
- TransferVisual implementation
- During a transfer, the GUI is blocked                    FIXED
- The written file has a size of 0 bytes
   A readyRead slot write to the file (maybe the GUI will be unlock)
- [ftptransfer.cpp:620] II Receiving file [empty filename] FIXED
- FtpTransfer::storeFile implementation
- FTPCLient must send only the filename (not the path)
   FtpClient::commandSTOR() Strips the path name
- ftpclient::commandSTORE implementation
- FtpClientWindow help text for STOR and RETR
- FtpClientWindow : add STORE and RETR in the global help text
- ftpclient::commandBINARY implementation (TYPE I)
- ftpclient::commandASCII implementation (TYPE A)
- Remove the PORT command from the FtpClient help (not used)
- common/FtpClient's typedef in a ftpdef.h
- Binary and Ascii commands sent to the server
- Help for Binary and Ascii

* v 0.0.4-132
- curlgetfile unit test implementation
- oldXident deleted (745 SLOC)
- curlfiletoxml unit test implementation
- ftpclient::commandSYST implementation
- An error in the LIST result (the '226 Transfer complete.' text is
   buggy)          FIXED
- gchar* to std::string conversion error
   std::string need to be truncated
- Compare the bytes num written the server and read by the client
   The lenght is the same
- A LIST command help text
- FtpTransfer segFault on second LIST command (not the first time) FIXED
- Using a NextCommand value in FtpTransfer    OK but segfault
   When we receive a command (LIST, RETR...)
   we set NextCommand to LIST (for example)
   In the newConnectionSlot() we treat NextCommand.
- FtpServer : Passive connection timeout [NOT FIXED but understood]
   FTPClient saying [ftpclient.cpp:124]   II Data channel opened
   FTPServer says   [ftptransfer.cpp:403] EE Passive connection
     timeout
   Error is in FTPTransfer : using newConnection() [slot] is the
     solution
- The serverlog has no windowTitle FIXED
- FtpServer telling why a passive connection failed (mainly for timeout)
- curlposteddata telling the key name if it has no value
- FTP Server : PASV response tells the server actual mode
- The instruction chapter of the texinfo manual has problems 
   (OK with @verbatim)
- texinfo based HTML documentation now in CVS repository
- Update texinfo file with the FTP port forwarding

* v 0.0.4-131
- curlaccounttoggleblacklist unit test implementation
- ftpclient::commandPWD implementation
- FTPClient : Makes the ^M disappear
- ftpclient::commandLIST implementation
- common/FtpClient::readDataChannel reads the whole packet
- A SEGFAULT on server when a LIST command is sent    FIXED
- FtpTransfer::waitForPassiveConnection implementation
- fixing FTP server passive mode
- FtpTransfer uses logger instead of cout
- ftpclient::sendString implementation
- A help detail for the PASV command
- ftpclient::toggleTransferMode implementation (PASV)
- common/FtpClient::waitControlResponse()   OK
- a common/ftpclient class
- FTPClient : Always scroll down to the end of FXText

* v 0.0.4-130
- CVS .cvsignore files maintenance
- Help+command implementation (USER, PORT, PASS)
- A help text (from menu item and HELP command)
- FTPClient : Add a statusbar
- GNet basic connection
- A connect button callback wich set text widgets enabled
- Text widgets are disabled
- GNet added to the dependencies
- Text widget for IP adress and server port
- Connect button
- tools/ftpclient skeleton
- Implementation of the binary mode

* v 0.0.4-129
- STOR command implementation
- RETR command implementation started
- Doxygen documentation
- FTP server : LIST command implementation
- PORT command implementation (with a given port)
- FtpControl send 502 Not implemented command
- CurlAccountDelete unit test implementation

* v 0.0.4-128
- Doxygen documentation
- GNU headers for FTP
- FTP classes in RainbruRPG::Network::Ftp namespace
   FtpServer         OK
   FtpControl        OK
   FtpTransfer       OK
   TransferVisual    OK
- Server uses FTPServer
- FTP classes in server/
- Doxygen documentation
- A MDI Child for the Objects (list, add delete...) (ObjectList)
- A manage->objects menu item
- Database has StaticObject and DynamicObject tables
- Server uses serverconfiguration values for database connection
- xmlserverconf saves database settings
- configdialog set changes in serverconfiguration
- Server's config dialog initialized with serverconfiguration database values
- xmlserverconf load database settings
- config/server.xml contains database informations
- Database connection values in the serverconfiguration.h/cpp
- Setting up database connection in the options 
- Database connection test OK
- Try to create the DB with a sql script
- ObjectMesh::getPosByName(std::string) implementation
- PosorDialog implementation
- An error when we dbl-click on an obect name (not an instance) FIXED

* v 0.0.4-127
- ChartSerie unit test implementation
- ChartLine doesn't need unit tests
- tests/common/chartbasetest.h Implementation
- Add some function in ChartBase for unit test purpose :
- Doxygen documentation
- Open all ChartViewer after all tests computed
- ChartViewer : Makes the close button close the dialog
- A 'close' button in the chartviewer
- floodpanel opens chartviewer with the FlooderTestBase
   getImageFilename, getImageWidth, getImageHeight values
- A ChartViewer dialog to view chart image
- FlooderTestBase::getFilename, getImageWidth, getImageHeight
   implementation
- ftReliable setup correctly ChartLine
- FlooderTestBase has a pure virtual int getTotalSteps() function
- Showing progress during netflooder tests
- ChartBase::setLeftCaption and setBottomCaption methods
- ChartBase::setTitle and setFilename methods
- ChartLine::drawLeftCaption take a long time (about 20 sec). Fix it
- ftReliable build ChartSerie for reliable and non-reliable tests
- ftReliable calls ChartLine::draw for bluit tests

* v 0.0.4-126
- ftReliable get the response time of the server
- ftReliable sends a npFlooder0004 packet
  Using EnetFlooderClient::sendPacketAndWaitResponse
- int EnetFlooderClient::sendPacketAndWaitResponse() implementation
- A Timer class based on glib2.0 added in common/
- The server answers to the npFlooder0004 packet
- delete documentation from CVS
- Change the NetFlooder MainWindow title
- Do the flooder execute selected tests
- Initial CVS commit on sourceforge.net
- a basic npFlooder0004 : a packet of 4 bytes (npId+responseId)
- Each packet used by EnetFlooderClient must have a unique Id
  to be sure the packet we received was a response.
  It is the responseId implemented in NetPacketFlooderBase
- The ALWAYS_USE_RELIABLE can be defined (in netpacketbase.h
- Each NetPacket can be reliable or not
- ScriptEditor : Disable the wordwrap
- ScriptEditor : A QStatusBar showing the position of the cursor