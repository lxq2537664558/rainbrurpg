TODO

export LD_LIBRARY_PATH=/usr/local/lib
cp htmlMakefile.am RainbruRPG.html/Makefile.am

* Connection desactivee dans erconnection.cpp *
* delete oldXident

* Unittest implementation
- In this order
   CurlAccountDelete
   curlaccounttoggleblacklist
   curldefaultwritefunction

* FlooderTest
- Test the implementation with the packet size (how the performance
   decrease) (ftSize)
- Constant time flooding (2ms or 200ms : packet lost?) (ftTime)

* Serveur
- Update the client number in statusbar
- Try to create the DB with a sh or sql script
  To allow use of custom type such as $(customType)
  We call mysql with : $mysql --user=name --password=pw
                        --execute='statement' db_name
  We can log informations with standard shell echo command
- Un dialog pour l'exportation du log (LogExportDialog)
  Choisir le nom de fichier d'exportation du log
- Modele Conceptuel de Donnees pour la base de donnees
  Dans le repertoire rpg/sql se trouve le script de creation de la
  base et de ses tables. Il s'agit pour l'instant de faire une bdd
  minimale qui acceptera la modification des positions et orientation
  des objets par connection au serveur.

* Client
- SEGFAULT when exiting the game
- client uses EnvironmentSetup in libRainbruRPG-core.so
  Waiting to be to the same rendering level with EnvironmentSetup
  (Fog and Skydome)

* Objectifs Seb
- Etape 2
  [7 jours] Avatar
	    - Chargement du mesh (je sais faire)
	    - Creation de 2 cameras distinctes, une en vue subjective et
	      une pour la troisième personne
  [7 jours] Animation de l'avatar
- Etape 3
  [7 jours] Integration d'un moteur physique
           - ODE : http://www.ode.org GNU LGPL in debian repository
              http://www.ogre3d.org/wiki/index.php/OgreODE
  [4 jours] Interaction avec l'environement
	    Le principe est connu et abondemment discute dans les forums

* Fil rouge (Samedi et Dimanche)
- Tests unitaires
  Les tests unitaires sont à jour pour TerminalAPI. Tous les tests de
  tApi font partis d'une seule et même TestSuite. 
  Tous les TextFixture doivent être uniquement dans des .h car ce sont
  des templates. L'implementation des templates est interdite dans un
  fichier cpp.
- documentation API
  Se balader dans la documentation Doxygen et voir si certaines classe
  ou fonction ne sont pas sous-documentees ou peu claires.
- test Valgrind
  Pour eviter les fuites memoires et autres.
- Modification et traduction du changelog
  Il doit convenir au format du TODO (avec emacs-goodies-el) et
  etre en Anglais
- manual pages : RainbruRPG.6 RainbruRPG-editor.6 RainbruRPG-server.6
- texinfo maunal : RainbruRPG.texinfo

* Divers
- xmlPlayerList inherits CurlGetFile
  Now, it simply uses it. It must do like xmlServerList, inherits it.
- Imaginer un Flooder reseau
  C'est un petit client qui envoie des demandes en continue, comme
  pour simuler des clients. On peut alors faire des statistiques.
- Tenter le portage de skyworks
  Page de telechargement des sources http://www.markmark.net/SkyWorks/
  Ca s'annonce difficile car le programme utilise des extension OpenGL
  non standard
- modifpersoattrb.php ne teste pas si les champs sont vides, 
  Resultat les champs sont mis a vide.
- ercreateperso utilise CurlPersoHeaderAdd et CurlPersoModifAttrb
- CurlSubmitForm::computePostedData est-il utilise?
- Un fichier adminmsg.xml contenant :
	- Un message de l'admin au joueur
	- Les messages des joueurs a l'admin
	- Si l'admin rend temporairement impossible la connection, dans combien
	  de temps le serveur sera de nouveau online. Rafraichissement de la
	  durée à l'aide de xident.
- Se renseigner sur Audiere



* *******************************************************
* ***************** Changelog ***************************
* *******************************************************

* v 0.0.4-127
- ChartSerie unit test implementation
Test size() by adding series
Test getMinValue, getMaxValue
Test getXCaption(int), getYCaption(int)
Test SetLengendCaption
- ChartLine doesn't need unit tests
- tests/common/chartbasetest.h Implementation
Constructor initial values
testing addSerie (ChartSerie *) 
testing addSerieColor (int, int, int)
testing getSerieColor(int) with black(0) and white(FFFFFF);
testing setLeftCaption (const std::string &)
testing setBottomCaption (const std::string &)
testing setTitle (const std::string &)
testing setFilename (const char *)
- Add some function in ChartBase for unit test purpose :
getSerieCount() for testing addSerie (ChartSerie *) 
getSerieColorCount() for testing addSerieColor (int, int, int)
getSerieColor(int);
getLeftCaption() for testing setLeftCaption (const std::string &)
getBottomCaption for testing setBottomCaption (const std::string &)
getTitle() for testing setTitle (const std::string &)
getFilename() for testing setFilename (const char *)
getImageWidth() and getImageHeight() to test the constructor parameters 
- Doxygen documentation
- Open all ChartViewer after all tests computed
- ChartViewer : Makes the close button close the dialog
- A 'close' button in the chartviewer
- floodpanel opens chartviewer with the FlooderTestBase
   getImageFilename, getImageWidth, getImageHeight values
- A ChartViewer dialog to view chart image
- FlooderTestBase::getFilename, getImageWidth, getImageHeight
   implementation
- ftReliable setup correctly ChartLine
- FlooderTestBase has a pure virtual int getTotalSteps() function
- Showing progress during netflooder tests
- ChartBase::setLeftCaption and setBottomCaption methods
- ChartBase::setTitle and setFilename methods
- ChartLine::drawLeftCaption take a long time (about 20 sec). Fix it
- ftReliable build ChartSerie for reliable and non-reliable tests
- ftReliable calls ChartLine::draw for bluit tests

* v 0.0.4-126
- ftReliable get the response time of the server
- ftReliable sends a npFlooder0004 packet
  Using EnetFlooderClient::sendPacketAndWaitResponse
- int EnetFlooderClient::sendPacketAndWaitResponse() implementation
- A Timer class based on glib2.0 added in common/
- The server answers to the npFlooder0004 packet
- delete documentation from CVS
- Change the NetFlooder MainWindow title
- Do the flooder execute selected tests
- Initial CVS commit on sourceforge.net
- a basic npFlooder0004 : a packet of 4 bytes (npId+responseId)
- Each packet used by EnetFlooderClient must have a unique Id
  to be sure the packet we received was a response.
  It is the responseId implemented in NetPacketFlooderBase
- The ALWAYS_USE_RELIABLE can be defined (in netpacketbase.h
- Each NetPacket can be reliable or not
- ScriptEditor : Disable the wordwrap
- ScriptEditor : A QStatusBar showing the position of the cursor

