					-*-org-*-

* v1.0.0
** v0.1.0
*** v0.0.1
**** Find a way to generate documentation
     
     For registered function and objects, we must have HTML
     documentation for C++/guile/ruby.

     See doxygen for aliasses and custom output. In last ressort, use
     the given XML output and generator to generate our own HTML output.
     Maybe we could create a doxygen input plugin, have to test and search for
     documentation


- [ ] Try in apidoc/
  Using doxygen to include ../logger/src
  With logger classes usable in extension in particular group
  explain this in APIDOC.org
- ServiceManager generates a XML file with references used by
  a binary doc tool 
- Documentation could be in OD format, the XML file only containing 
  a reference to the source file containing implementation (using a macro
  and __filename__)
#+BEGIN_EXAMPLE
=begin name_of_c_function

Here start the documentation of the function
#+END_EXAMPLE
- doc-tool can be used with custom header/footer/CSS for adsense using
  a command-line option

**** To embed a ruby interpreter :
http://metaeditor.sourceforge.net/embed/
http://dev.rubycentral.com/pickaxe/ext_ruby.html
- Can we forbid some includes/requires (for example IO) ?
- based on context. A given environment to avoid thet all C++ objects
   are always shared with ruby interpreter
   Examples : Ruleset, Action, Gui
- Must be able to
   Call a named function in the ruby script from C++
   Share some C++ objects with interpreted ruby script (for example
     for ruleset, share World and Character classes)
- i18 ruby with gettext ?

**** Make logger usable in plugins using SWIG

**** Must have a common interface
     
     To register C++ functions and objects to guile and ruby.
     C++ code may be in shared library. Maybe using the PubSub
     design pattern.

- [ ] Make a list of possible events name
  events name become function names in guile/ruby

**** [Design] Handle PubSub to make usable C++ code with ruby/guile
     CLOCK: [2012-10-21 dim. 12:02]--[2012-10-21 dim. 12:21] =>  0:19
- We can identify these services, at least : logger, threads, renderer, 
  sound, network, physical engine, input system, launcher...
- All these services are not guile/ruby ones, but should be accessible
  through scripts extensions.
- To stock them, we could use a hashmap but how we could pass options to
  the message :
  =services["network"]->_send("message", options...)=
- However, we need a ServiceManager singleton and some macros to fix it :
  =SEND("service", "message", options...)=
- We use at this time a =template<typename T> const &T getService(string name)=
  function. 
- We have to test (possibly in C++11) :
#+BEGIN_EXAMPLE
class Service { };
class NetworkService: public Service { };
services = std:hash<Service*>;

template <typename T> register(string name)
{
  services[name] = new T;
  services[name].start();
}

template <typename T> getService(string name)
{
  try
  {
    return dynamic_cast<T>(services[name]);
  }
  catch (cast error...)
}
#+END_EXAMPLE
- So, send could become :
#+BEGIN_EXAMPLE
template<typename O> send(string serviceName, O options)
{
  We test for the option type, as NetworkServiceOptions...
}*
#+END_EXAMPLE
- NetWorkServiceOption become part of the NetworkService header.

**** [GUI] Implement a services editor in fox-1.6
- [ ] Could show a graph of installed plugins using `graphviz` if this tool
  was found by ./configure. If not found, print a message for 
  `graphviz`'s missing.
  - [ ] This graph could highlight in red circular dependencies
- [ ] Could update automatically installed plugins with the use
  of Rainbrurpg's Extension Repository (a foswiki web)
**** Implement dependency graph in C++
     CLOCK: [2013-10-07 lun. 18:22]
     CLOCK: [2013-10-07 lun. 10:09]--[2013-10-07 lun. 10:56] =>  0:47
     CLOCK: [2013-10-06 dim. 22:19]--[2013-10-06 dim. 23:25] =>  1:06
     CLOCK: [2013-10-06 dim. 19:14]--[2013-10-06 dim. 19:50] =>  0:36
     using Boost Graph Library
- [ ] Implements a flex/bison parser or Boost.Spirit
      Maybe in a lib dependsParser
      We need some semantic actions : http://www.boost.org/doc/libs/1_54_0/libs/spirit/doc/html/spirit/qi/tutorials/semantic_actions.html
      - [ ] Extension name must be a WikiWord
	http://foswiki.org/System/WikiWord
	How to unit test this ? Maybe a splitted grammar if possible ?
	Mauby using multiple grammars see http://stackoverflow.com/a/9732918
      - [ ] OP are =, <, <=, >, >=
      - [ ] version = x*, x.y* or x.y.z* or x.y.z-r*
	Where x,y,z,r are one or more digit
      - [ ] DEP = ServiceName OR service_name OP version
      - [ ] DEPS = DEP or DEP;DEP;DEP
- [ ] Must be fully unit tested
- [ ] We must use 'Topological sorting' to find load order
  see http://en.wikipedia.org/wiki/Dependency_graph#Deriving_an_evaluation_order
  and http://en.wikipedia.org/wiki/Topological_sorting
  then http://www.boost.org/doc/libs/1_42_0/libs/graph/doc/topological_sort.html
  - [ ] we need a Directed Acyclic Graph
- [ ] So we need to detect cycles
  see http://en.wikipedia.org/wiki/Tarjan%E2%80%99s_strongly_connected_components_algorithm
  and http://www.boost.org/doc/libs/1_43_0/libs/graph/doc/strong_components.html
- [ ] Implements Service
- [ ] vector::insert can add a service just before the given iterator
- [ ] Implements ServiceManager
- [ ] const_iterator computeLoadOrder(const Service*) 
      returns the iterator of the insert() or an error
      string mLoadOrderError contains last dependency error
**** TODO Compute load order in ruby
     CLOCK: [2012-02-18 sam. 16:36]--[2012-02-18 sam. 16:42] =>  0:06
     CLOCK: [2011-10-29 sam. 11:30]--[2011-10-29 sam. 11:43] =>  0:13
     CLOCK: [2011-10-28 ven. 10:25]--[2011-10-28 ven. 10:56] =>  0:31
- [X] Depends.rb handles the depends string and returns a list of dependencies
- [X] Unit tests fail because Dependencies returns an empty array
- [ ] Ruby tests should use a directed graph (from Ruby Graph Library)
  see http://en.wikipedia.org/wiki/Dependency_graph
- [ ] Must be able to detect circular dependencies
  Maybe this method http://rdoc.info/gems/rgl/0.4.0/RGL/Graph#strongly_connected_components-instance_method
- [ ] Use an output for graphviz
**** TODO Correct project setup
     CLOCK: [2013-06-30 dim. 09:35]--[2013-06-30 dim. 09:48] =>  0:13
     CLOCK: [2013-05-03 ven. 11:55]--[2013-05-03 ven. 12:53] =>  0:58
     CLOCK: [2012-12-27 jeu. 21:41]--[2012-12-27 jeu. 21:55] =>  0:14
- [X] Merge with older concept tree
- [X] Uses autotools
- [ ] uses rainbrurpg-logger
- [X] Set LICENSE file to GPLv3
  Make symlinks real files
- [X] all sources go in src/
  An example binary is in tools/ or examples/ and scm/ follow
- [ ] generate a pkg-config file
- [ ] create a DEPENDENCIES file
- [ ] Create a wiki page under NewProjectLayout
- [ ] use C++11
